{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Add Airtable package",
        "description": "Add the `airtable` npm package to the project's `package.json` dependencies.",
        "details": "Execute `npm install airtable` or `yarn add airtable`.",
        "testStrategy": "Verify `airtable` entry exists in `package.json` and `node_modules`.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Install airtable npm package",
            "description": "Add the airtable package to project dependencies",
            "details": "- Run npm install airtable\n- Verify package is added to package.json\n- Check for any peer dependencies\n- Update package-lock.json",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "Verify package installation and compatibility",
            "description": "Ensure the airtable package is properly installed and compatible with the project",
            "details": "- Test import statement in a simple script\n- Verify TypeScript types are available\n- Check for any version conflicts\n- Test basic Airtable API connectivity",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Configure Airtable Environment Variables",
        "description": "Update `src/app/config/env/index.ts` to define and load new environment variables required for Airtable API access.",
        "details": "Add `AIRTABLE_API_KEY`, `AIRTABLE_BASE_ID`, `AIRTABLE_PERSONA_TABLE_ID`, `AIRTABLE_GAMES_TABLE_ID`, `AIRTABLE_PLATFORMS_TABLE_ID`. Ensure secure loading from `.env`.",
        "testStrategy": "Write a simple test to confirm environment variables are accessible in the application context.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Add Airtable environment variables to config",
            "description": "Define new environment variables for Airtable API access in the environment configuration",
            "details": "- Add AIRTABLE_API_KEY environment variable\n- Add AIRTABLE_BASE_ID environment variable\n- Update environment variable types and validation\n- Add default values or required flags\n- Update environment documentation",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "Update environment validation and error handling",
            "description": "Add validation for Airtable environment variables and proper error handling",
            "details": "- Add validation for required Airtable environment variables\n- Implement error handling for missing environment variables\n- Add helpful error messages for configuration issues\n- Update environment loading logic\n- Add environment variable documentation",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 2
          }
        ]
      },
      {
        "id": 3,
        "title": "Create AirtableProvider Module",
        "description": "Create a new module `src/infra/providers/AirtableProvider.ts` responsible for all communication with the Airtable API.",
        "details": "Initialize the `airtable.js` client using the configured environment variables. This module will encapsulate Airtable API interactions.",
        "testStrategy": "Unit test the `AirtableProvider` initialization to ensure it correctly sets up the Airtable client.",
        "priority": "high",
        "dependencies": [1, 2],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up Airtable authentication and base configuration",
            "description": "Configure Airtable API authentication, create base provider class structure, and set up error handling patterns",
            "details": "- Import Airtable package and configure API key\n- Create base AirtableProvider class with authentication setup\n- Implement error handling for API failures\n- Add logging for debugging and monitoring\n- Set up base configuration for different Airtable bases",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Implement Persona table fetching method",
            "description": "Create method to fetch and parse data from the Agent Personas table in Airtable",
            "details": "- Create fetchPersonas() method in AirtableProvider\n- Handle Airtable record structure and field mapping\n- Implement data transformation from Airtable format to internal format\n- Add error handling for missing or malformed data\n- Add validation for required persona fields",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Implement Games table fetching method",
            "description": "Create method to fetch and parse data from the Games table in Airtable",
            "details": "- Create fetchGames() method in AirtableProvider\n- Handle game instruction data structure and field mapping\n- Implement data transformation for game instructions\n- Add error handling for missing game data\n- Add validation for required game fields",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "Implement Platforms table fetching method",
            "description": "Create method to fetch and parse data from the Platforms table in Airtable",
            "details": "- Create fetchPlatforms() method in AirtableProvider\n- Handle platform data structure and field mapping\n- Implement data transformation for platform information\n- Add error handling for missing platform data\n- Add validation for required platform fields",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Add caching and performance optimization",
            "description": "Implement caching mechanisms and performance optimizations for Airtable API calls",
            "details": "- Implement in-memory caching for fetched data\n- Add cache invalidation strategies\n- Implement rate limiting for API calls\n- Add performance monitoring and metrics\n- Optimize data fetching patterns",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 6,
            "title": "Add comprehensive error handling and retry logic",
            "description": "Implement robust error handling, retry mechanisms, and fallback strategies",
            "details": "- Implement exponential backoff for failed API calls\n- Add circuit breaker pattern for API failures\n- Create fallback mechanisms for when Airtable is unavailable\n- Add detailed error logging and monitoring\n- Implement graceful degradation strategies",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement AirtableProvider Persona Fetching",
        "description": "Add a method to `AirtableProvider` to fetch records from the `Agent Personas` table in Airtable.",
        "details": "This method should handle API requests, error handling, and basic data transformation to retrieve persona fields as defined in the PRD.",
        "testStrategy": "Unit test the persona fetching method with mock Airtable responses to ensure correct data retrieval and parsing.",
        "priority": "high",
        "dependencies": [3],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement AirtableProvider Game Instructions Fetching",
        "description": "Add a method to `AirtableProvider` to fetch records from the `Games` table in Airtable.",
        "details": "This method should handle API requests, error handling, and basic data transformation to retrieve game instructions and related fields.",
        "testStrategy": "Unit test the game instructions fetching method with mock Airtable responses to ensure correct data retrieval and parsing.",
        "priority": "high",
        "dependencies": [3],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement AirtableProvider Platform Data Fetching",
        "description": "Add a method to `AirtableProvider` to fetch records from the `Platforms` table in Airtable.",
        "details": "This method should handle API requests, error handling, and basic data transformation to retrieve platform-specific data.",
        "testStrategy": "Unit test the platform data fetching method with mock Airtable responses to ensure correct data retrieval and parsing.",
        "priority": "high",
        "dependencies": [3],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Integrate Airtable Persona Fetching into PersonaManager",
        "description": "Refactor `PersonaManager.fetchPersonaTemplate` to delegate data fetching to the new `AirtableProvider`.",
        "details": "Implement a private method, `_buildPersonaTemplate`, to construct the final persona string from the raw data fetched from Airtable, mimicking the original file structure.",
        "testStrategy": "Unit test `PersonaManager` to ensure it correctly fetches persona data via `AirtableProvider` and builds the template.",
        "priority": "high",
        "dependencies": [4],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Refactor fetchPersonaTemplate method signature",
            "description": "Update the method signature to accept AirtableProvider and handle the new data source",
            "details": "- Modify method signature to accept AirtableProvider instance\n- Update method documentation and type definitions\n- Ensure backward compatibility if needed\n- Add error handling for AirtableProvider failures",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 2,
            "title": "Implement data transformation from Airtable to internal format",
            "description": "Transform Airtable persona data to match the expected internal data structure",
            "details": "- Map Airtable fields to internal persona structure\n- Handle data type conversions and validation\n- Implement fallback values for missing fields\n- Add data sanitization and cleaning\n- Ensure data consistency with existing format",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 7
          },
          {
            "id": 3,
            "title": "Add error handling and fallback mechanisms",
            "description": "Implement robust error handling for Airtable integration with fallback to existing data sources",
            "details": "- Handle Airtable API failures gracefully\n- Implement fallback to existing file-based data if available\n- Add logging for debugging and monitoring\n- Implement retry logic for transient failures\n- Add user-friendly error messages",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 7
          }
        ]
      },
      {
        "id": 8,
        "title": "Integrate Airtable Game Instructions into PersonaManager",
        "description": "Replace the existing `fetchChaosChessInstructions` with a new `fetchGamesInstructions` method in `PersonaManager` to load all game records from the `Games` table via `AirtableProvider`.",
        "details": "Store the fetched instructions in the `gamesInstructions` property, using the game's `Name` field as the key (alias) for efficient lookup.",
        "testStrategy": "Unit test `PersonaManager` to ensure it correctly fetches and stores game instructions from Airtable.",
        "priority": "high",
        "dependencies": [5],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Integrate Airtable Platform Data into PersonaManager",
        "description": "Implement `fetchPlatformData` in `PersonaManager` to fetch all records from the `Platforms` table via `AirtableProvider`.",
        "details": "Store the platform data in a way that allows for efficient lookup by the platform's `Official Website` URL, handling root domains and subdomains.",
        "testStrategy": "Unit test `PersonaManager` to ensure it correctly fetches and indexes platform data from Airtable.",
        "priority": "high",
        "dependencies": [6],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Update PersonaManager Initialization",
        "description": "Modify the `PersonaManager.setup` method to call the newly implemented fetchers for persona, games, and platforms.",
        "details": "Ensure that all necessary data is loaded from Airtable when the `PersonaManager` is initialized.",
        "testStrategy": "Integration test the `PersonaManager` setup to confirm all data types (persona, games, platforms) are loaded correctly on startup.",
        "priority": "high",
        "dependencies": [7, 8, 9],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Add Platform Query Parameter to Chat WebSocket",
        "description": "Modify the WebSocket connection handling in `chat.ts` to accept an optional `platform` string parameter in the connection query.",
        "details": "This parameter will be used to explicitly specify the operating platform for the agent.",
        "testStrategy": "Manual test by connecting to the WebSocket with and without the `platform` query parameter.",
        "priority": "medium",
        "dependencies": [10],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement Platform Detection Logic in Chat Module",
        "description": "In `chat.ts`, implement logic within the WebSocket `open` event to determine the current platform.",
        "details": "Prioritize the `platform` query parameter; if absent, use the request's `Origin` or `Host` header. Match the hostname against the `Official Website` URLs of platforms managed by `PersonaManager`, supporting root domains and subdomains.",
        "testStrategy": "Unit test the platform detection logic with various input scenarios (query param, different hostnames, subdomains).",
        "priority": "high",
        "dependencies": [11],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement platform detection from WebSocket query parameters",
            "description": "Extract and validate platform information from WebSocket connection query parameters",
            "details": "- Parse platform parameter from WebSocket query string\n- Validate platform parameter against allowed values\n- Set default platform if none provided\n- Add logging for platform detection\n- Handle malformed or invalid platform parameters",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 2,
            "title": "Add platform validation and error handling",
            "description": "Implement validation logic for platform detection and handle error cases",
            "details": "- Validate platform against available platforms from PersonaManager\n- Handle unknown or unsupported platforms\n- Implement fallback to default platform\n- Add error logging for invalid platforms\n- Provide user feedback for platform issues",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          },
          {
            "id": 3,
            "title": "Integrate platform detection with WebSocket connection flow",
            "description": "Integrate platform detection into the existing WebSocket connection and initialization flow",
            "details": "- Add platform detection to WebSocket open event handler\n- Store platform information in connection context\n- Pass platform information to subsequent processing steps\n- Update connection logging to include platform information\n- Ensure platform detection happens early in connection flow",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          }
        ]
      },
      {
        "id": 13,
        "title": "Inject Platform Context into Agent Welcome Prompt",
        "description": "Fetch the corresponding platform's data from `PersonaManager` based on the detected platform and update the `welcomePrompt` in `chat.ts`.",
        "details": "Inject the platform's name and description into the agent's initial context, e.g., `[SYSTEM]: You are currently operating on the ${platform.name} platform. Here is a description of it: ${platform.description}`.",
        "testStrategy": "Integration test the chat flow to ensure the welcome prompt correctly includes the dynamic platform context.",
        "priority": "high",
        "dependencies": [12],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Remove Legacy File System Dependencies",
        "description": "Clean up `PersonaManager` by removing `fs/promises` and `path` imports, as data is now sourced from Airtable.",
        "details": "Ensure no lingering file system-based data loading logic remains.",
        "testStrategy": "Code review to confirm removal of specified imports and related file system operations.",
        "priority": "medium",
        "dependencies": [7, 8, 9],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Verify Airtable Integration and Periodic Refresh",
        "description": "Conduct comprehensive integration testing to ensure the entire Airtable refactor works as expected, including initial data loading and the periodic refresh mechanism.",
        "details": "Verify that changes in Airtable are reflected in the application after the refresh interval. Monitor logs for any errors or warnings related to Airtable API interactions.",
        "testStrategy": "End-to-end testing. Modify data in Airtable and observe application behavior. Simulate API downtime to check fallback.",
        "priority": "high",
        "dependencies": [10, 13, 14],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create unit tests for AirtableProvider methods",
            "description": "Write comprehensive unit tests for all AirtableProvider methods and error scenarios",
            "details": "- Test authentication and configuration\n- Test each table fetching method (Personas, Games, Platforms)\n- Test error handling and retry logic\n- Test caching mechanisms\n- Test data transformation and validation\n- Mock Airtable API responses for testing",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 2,
            "title": "Test PersonaManager integration with AirtableProvider",
            "description": "Verify that PersonaManager correctly uses AirtableProvider for data fetching",
            "details": "- Test PersonaManager initialization with AirtableProvider\n- Verify data loading from all three tables (Personas, Games, Platforms)\n- Test error handling when AirtableProvider fails\n- Verify data consistency between old and new data sources\n- Test the periodic refresh mechanism",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 3,
            "title": "Test platform detection and context injection",
            "description": "Verify that platform detection works correctly and platform context is properly injected",
            "details": "- Test WebSocket platform parameter handling\n- Verify platform detection logic for different platforms\n- Test platform context injection into welcome prompts\n- Test error handling for unknown platforms\n- Verify platform-specific data is correctly loaded and used",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 15
          },
          {
            "id": 4,
            "title": "Perform end-to-end integration testing",
            "description": "Conduct comprehensive end-to-end testing of the entire Airtable integration",
            "details": "- Test complete flow from WebSocket connection to platform detection\n- Verify data flows correctly through all components\n- Test with real Airtable data (if available) or realistic mock data\n- Test performance under load\n- Verify all error scenarios are handled gracefully\n- Test the complete user experience flow",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 15
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-26T16:59:20.361Z",
      "updated": "2025-08-26T20:17:22.386Z",
      "description": "Tasks for master context"
    }
  }
}
